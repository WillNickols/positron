{
	"openrpc": "1.3.0",
	"info": {
		"title": "Variables Backend",
		"version": "1.0.0"
	},
	"methods": [
		{
			"name": "list",
			"summary": "List all variables",
			"description": "Returns a list of all the variables in the current session.",
			"params": [],
			"result": {
				"schema": {
					"name": "variable_list",
					"description": "A view containing a list of variables in the session.",
					"type": "object",
					"properties": {
						"variables": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/variable"
							},
							"description": "A list of variables in the session."
						},
						"length": {
							"type": "integer",
							"description": "The total number of variables in the session. This may be greater than the number of variables in the 'variables' array if the array is truncated."
						},
						"version": {
							"type": "integer",
							"description": "The version of the view (incremented with each update)"
						}
					},
					"required": [
						"variables",
						"length"
					]
				}
			}
		},
		{
			"name": "clear",
			"summary": "Clear all variables",
			"description": "Clears (deletes) all variables in the current session.",
			"params": [
				{
					"name": "include_hidden_objects",
					"description": "Whether to clear hidden objects in addition to normal variables",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {}
		},
		{
			"name": "delete",
			"summary": "Deletes a set of named variables",
			"description": "Deletes the named variables from the current session.",
			"params": [
				{
					"name": "names",
					"description": "The names of the variables to delete.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"schema": {
					"description": "The names of the variables that were successfully deleted.",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		{
			"name": "inspect",
			"summary": "Inspect a variable",
			"description": "Returns the children of a variable, as an array of variables.",
			"params": [
				{
					"name": "path",
					"description": "The path to the variable to inspect, as an array of access keys.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"schema": {
					"type": "object",
					"name": "inspected_variable",
					"description": "An inspected variable.",
					"properties": {
						"children": {
							"type": "array",
							"description": "The children of the inspected variable.",
							"items": {
								"$ref": "#/components/schemas/variable"
							}
						},
						"length": {
							"type": "integer",
							"description": "The total number of children. This may be greater than the number of children in the 'children' array if the array is truncated."
						}
					},
					"required": [
						"children",
						"length"
					]
				}
			}
		},
		{
			"name": "clipboard_format",
			"summary": "Format for clipboard",
			"description": "Requests a formatted representation of a variable for copying to the clipboard.",
			"params": [
				{
					"name": "path",
					"description": "The path to the variable to format, as an array of access keys.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "format",
					"description": "The requested format for the variable, as a MIME type",
					"schema": {
						"type": "string",
						"enum": [
							"text/html",
							"text/plain"
						]
					}
				}
			],
			"result": {
				"schema": {
					"type": "object",
					"name": "formatted_variable",
					"description": "An object formatted for copying to the clipboard.",
					"properties": {
						"content": {
							"type": "string",
							"description": "The formatted content of the variable."
						}
					},
					"required": [
						"format",
						"content"
					]
				}
			}
		},
		{
			"name": "view",
			"summary": "Request a viewer for a variable",
			"description": "Request that the runtime open a data viewer to display the data in a variable.",
			"params": [
				{
					"name": "path",
					"description": "The path to the variable to view, as an array of access keys.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"schema": {
					"description": "The ID of the viewer that was opened.",
					"type": "string"
				}
			}
		},
		{
			"name": "table_get_description",
			"summary": "Get the schema, shape, and other metadata of a table variable",
			"description": "Get the schema, shape, and other metadata of a table variable.",
			"params": [
				{
					"name": "path",
					"description": "The path to the variable to view, as an array of access keys.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"schema": {
					"type": "object",
					"name": "variable_table_description",
					"description": "The schema, shape, and other metadata of a table variable",
					"properties": {
						"schema": {
							"description": "The schema of the table variable",
							"$ref": "data_explorer-backend-openrpc.json#/components/schemas/table_schema"
						},
						"shape": {
							"description": "The shape of the table variable",
							"$ref": "data_explorer-backend-openrpc.json#/components/schemas/table_shape"
						}
					}
				}
			}
		},
		{
			"name": "query_table",
			"summary": "Query a table variable, for use from an assistant context",
			"description": "Query a table variable, for use from an assistant context",
			"params": [
				{
					"name": "path",
					"description": "The path to the variable to view, as an array of access keys.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "query_type",
					"description": "The type of query to perform",
					"schema": {
						"type": "string",
						"enum": [
							"description",
							"summarize"
						]
					}
				},
				{
					"name": "options",
					"description": "Any query type specific options",
					"required": false,
					"schema": {
						"$ref": "#/components/schemas/table_query_options"
					}
				}
			],
			"result": {
				"schema": {
					"$ref": "#/components/schemas/table_query_result"
				}
			}
		}
	],
	"components": {
		"schemas": {
			"variable": {
				"type": "object",
				"name": "variable",
				"description": "A single variable in the runtime.",
				"properties": {
					"access_key": {
						"type": "string",
						"description": "A key that uniquely identifies the variable within the runtime and can be used to access the variable in `inspect` requests"
					},
					"display_name": {
						"type": "string",
						"description": "The name of the variable, formatted for display"
					},
					"display_value": {
						"type": "string",
						"description": "A string representation of the variable's value, formatted for display and possibly truncated"
					},
					"display_type": {
						"type": "string",
						"description": "The variable's type, formatted for display"
					},
					"type_info": {
						"type": "string",
						"description": "Extended information about the variable's type"
					},
					"size": {
						"type": "integer",
						"description": "The size of the variable's value in bytes"
					},
					"kind": {
						"type": "string",
						"enum": [
							"boolean",
							"bytes",
							"class",
							"collection",
							"empty",
							"function",
							"map",
							"number",
							"other",
							"string",
							"table",
							"lazy",
							"connection"
						],
						"description": "The kind of value the variable represents, such as 'string' or 'number'"
					},
					"length": {
						"type": "integer",
						"description": "The number of elements in the variable, if it is a collection"
					},
					"has_children": {
						"type": "boolean",
						"description": "Whether the variable has child variables"
					},
					"has_viewer": {
						"type": "boolean",
						"description": "True if there is a viewer available for this variable (i.e. the runtime can handle a 'view' request for this variable)"
					},
					"is_truncated": {
						"type": "boolean",
						"description": "True if the 'value' field is a truncated representation of the variable's value"
					},
					"updated_time": {
						"type": "integer",
						"description": "The time the variable was created or updated, in milliseconds since the epoch, or 0 if unknown."
					}
				},
				"required": [
					"access_key",
					"display_name",
					"display_value",
					"display_type",
					"type_info",
					"size",
					"kind",
					"length",
					"has_children",
					"has_viewer",
					"is_truncated",
					"updated_time"
				]
			},
			"table_query_options": {
				"name": "table_query_options",
				"description": "Additional options for different query types",
				"oneOf": [
					{
						"name": "summarize_options",
						"$ref": "#/components/schemas/table_summarize_options"
					}
				]
			},
			"table_query_result": {
				"name": "table_query_result",
				"description": "Result of a table query",
				"oneOf": [
					{
						"name": "table_description_result",
						"$ref": "#/components/schemas/table_description_result"
					},
					{
						"name": "table_summarize_result",
						"$ref": "#/components/schemas/table_summarize_result"
					}
				]
			},
			"table_summarize_options": {
				"type": "object",
				"name": "table_summarize_options",
				"description": "The column indices (relative to the filtered/selected columns) to summarize",
				"properties": {
					"column_indices": {
						"type": "array",
						"description": "The column indices (relative to the filtered/selected columns) to summarize",
						"items": {
							"type": "integer"
						}
					}
				}
			},
			"table_description_result": {
				"type": "object",
				"name": "table_description_result",
				"description": "Description of the table variable: shape, schema, and other metadata",
				"properties": {
					"schema": {
						"description": "The schema of the table variable",
						"$ref": "data_explorer-backend-openrpc.json#/components/schemas/table_schema"
					},
					"shape": {
						"description": "The shape of the table variable",
						"$ref": "data_explorer-backend-openrpc.json#/components/schemas/table_shape"
					}
				}
			},
			"table_summarize_result": {
				"type": "object",
				"name": "table_summarize_result",
				"description": "Summary statistics for requested columns",
				"required": [
					"type_display",
					"null_count"
				],
				"properties": {
					"column_name": {
						"type": "string",
						"description": "The name of the column"
					},
					"type_display": {
						"description": "Canonical Positron display name of data type",
						"$ref": "data_explorer-backend-openrpc.json#/components/schemas/column_display_type"
					},
					"null_count": {
						"type": "integer",
						"description": "The number of null values"
					},
					"min_value": {
						"type": "string",
						"description": "Minimum value as string (for numeric types)"
					},
					"max_value": {
						"type": "string",
						"description": "Maximum value as string (for numeric types)"
					},
					"mean": {
						"type": "string",
						"description": "Average value as string (for numeric types)"
					},
					"median": {
						"type": "string",
						"description": "Sample median (50% value) as string (for numeric types)"
					},
					"stdev": {
						"type": "string",
						"description": "Sample standard deviation as a string (for numeric types)"
					},
					"true_count": {
						"type": "integer",
						"description": "The number of non-null true values (for boolean types)"
					},
					"false_count": {
						"type": "integer",
						"description": "The number of non-null false values (for boolean types)"
					},
					"num_empty": {
						"type": "integer",
						"description": "The number of empty / length-zero values (for string types)"
					},
					"num_unique": {
						"type": "integer",
						"description": "The exact number of distinct values"
					}
				}
			}
		}
	}
}
