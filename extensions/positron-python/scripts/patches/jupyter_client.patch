diff --git a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/asynchronous/client.py b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/asynchronous/client.py
index cde8ecaf3cf..62b31b32f44 100644
--- a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/asynchronous/client.py
+++ b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/asynchronous/client.py
@@ -5,7 +5,7 @@ from __future__ import annotations
 
 import typing as t
 
-import zmq.asyncio
+from zmq import asyncio as zmq_asyncio
 from traitlets import Instance, Type
 
 from ..channels import AsyncZMQSocketChannel, HBChannel
@@ -33,11 +33,11 @@ class AsyncKernelClient(KernelClient):
     raising :exc:`queue.Empty` if no message arrives within ``timeout`` seconds.
     """
 
-    context = Instance(zmq.asyncio.Context)  # type:ignore[arg-type]
+    context = Instance(zmq_asyncio.Context)  # type:ignore[arg-type]
 
-    def _context_default(self) -> zmq.asyncio.Context:
+    def _context_default(self) -> zmq_asyncio.Context:
         self._created_context = True
-        return zmq.asyncio.Context()
+        return zmq_asyncio.Context()
 
     # --------------------------------------------------------------------------
     # Channel proxy methods

diff --git a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/client.py b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/client.py
index aa353ac28..4d74bedd4 100644
--- a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/client.py
+++ b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/client.py
@@ -10,7 +10,7 @@ from functools import partial
 from getpass import getpass
 from queue import Empty

-import zmq.asyncio
+import zmq
 from jupyter_core.utils import ensure_async
 from traitlets import Any, Bool, Instance, Type

diff --git a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/session.py b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/session.py
index c387cd06c..cfdd6a42a 100644
--- a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/session.py
+++ b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/session.py
@@ -27,7 +27,8 @@ from datetime import datetime, timezone
 from hmac import compare_digest

 # We are using compare_digest to limit the surface of timing attacks
-import zmq.asyncio
+import zmq
+from zmq import asyncio as zmq_asyncio
 from tornado.ioloop import IOLoop
 from traitlets import (
     Any,
@@ -810,7 +811,7 @@ class Session(Configurable):
             # ZMQStreams and dummy sockets do not support tracking.
             track = False

-        if isinstance(stream, zmq.asyncio.Socket):
+        if isinstance(stream, zmq_asyncio.Socket):
             assert stream is not None  # type:ignore[unreachable]
             stream = zmq.Socket.shadow(stream.underlying)

@@ -906,7 +907,7 @@ class Session(Configurable):
         # Don't include buffers in signature (per spec).
         to_send.append(self.sign(msg_list[0:4]))
         to_send.extend(msg_list)
-        if isinstance(stream, zmq.asyncio.Socket):
+        if isinstance(stream, zmq_asyncio.Socket):
             stream = zmq.Socket.shadow(stream.underlying)
         stream.send_multipart(to_send, flags, copy=copy)

@@ -932,7 +933,7 @@ class Session(Configurable):
         """
         if isinstance(socket, ZMQStream):  # type:ignore[unreachable]
             socket = socket.socket  # type:ignore[unreachable]
-        if isinstance(socket, zmq.asyncio.Socket):
+        if isinstance(socket, zmq_asyncio.Socket):
             socket = zmq.Socket.shadow(socket.underlying)

         try:
diff --git a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/channels.py b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/channels.py
index 465dccdf59e..485d96ad4f0 100644
--- a/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/channels.py
+++ b/extensions/positron-python/python_files/posit/positron/_vendor/jupyter_client/channels.py
@@ -8,7 +8,8 @@ import typing as t
 from queue import Empty
 from threading import Event, Thread
 
-import zmq.asyncio
+import zmq
+from zmq import asyncio as zmq_asyncio
 from jupyter_core.utils import ensure_async
 
 from ._version import protocol_version_info
@@ -274,9 +275,9 @@ class ZMQSocketChannel:
 class AsyncZMQSocketChannel(ZMQSocketChannel):
     """A ZMQ socket in an async API"""
 
-    socket: zmq.asyncio.Socket
+    socket: zmq_asyncio.Socket
 
-    def __init__(self, socket: zmq.asyncio.Socket, session: Session, loop: t.Any = None) -> None:
+    def __init__(self, socket: zmq_asyncio.Socket, session: Session, loop: t.Any = None) -> None:
         """Create a channel.
 
         Parameters
@@ -288,7 +289,7 @@ class AsyncZMQSocketChannel(ZMQSocketChannel):
         loop
             Unused here, for other implementations
         """
-        if not isinstance(socket, zmq.asyncio.Socket):
+        if not isinstance(socket, zmq_asyncio.Socket):
             msg = "Socket must be asyncio"  # type:ignore[unreachable]
             raise ValueError(msg)
         super().__init__(socket, session)
